#include <iostream> // Подключение библиотеки для работы с вводом и выводом.
#include <string>   // Подключение библиотеки для работы со строками.

    using namespace std; // Использование стандартного пространства имен, чтобы не писать std:: перед каждым элементом из стандартной библиотеки.

    // class.cpp
    // компилируется с помощью: /EHsc
    // Пример ключевого слова class
    // Демонстрирует полиморфизм /виртуальные функции.

//    class dog // Объявление класса "dog" (собака).
//    {
//    public: // Доступные элементы для других классов и функций.
//        dog() { // Конструктор классa dog.
//            _legs = 4; // Инициализация количества лап у собаки (всегда 4).
//            _bark = true; // Инициализация свойства, указывающего, может ли собака лаять (по умолчанию - может).
//        }
//
//        void setDogSize(string dogSize) { // Метод, устанавливающий размер собаки.
//            _dogSize = dogSize; // Присваивание параметра dogSize полю _dogSize.
//        }
//
//        virtual void setEars(string type) { // Виртуальный метод для установки типа ушей собаки. Позволяет переопределять его в производных классах.
//            _earType = type; // Присваивание параметра type полю _earType.
//        }
//
//    private: // Защита полей от доступа извне.
//        string _dogSize, _earType; // Переменные для хранения размера и типа ушей собаки.
//        int _legs; // Переменная для хранения количества лап.
//        bool _bark; // Переменная, определяющая, может ли собака лаять.
//
//    };
//
//    class breed : public dog { // Объявление класса "breed", который наследуется от класса dog.
//
//    public:
//        breed(string color, string size) { // Конструктор классa breed, принимающий цвет и размер.
//            _color = color; // Присваивание цвета полю _color.
//            setDogSize(size); // Вызов метода setDogSize для установки размера собаки.
//        }
//
//        string getColor() { // Метод для получения цвета породы собаки.
//            return _color; // Возврат значения поля _color.
//        }
//
//        void setEars(string length, string type) { // Переопределение метода setEars для настройки длины и типа ушей.
//            _earLength = length; // Присваивание длины ушей.
//            _earType = type; // Присваивание типа ушей.
//        }
//
//    protected: // Доступность полей для производных классов.
//        string _color, _earLength, _earType; // Переменные для хранения цвета и типов ушей.
//
//    };
//
//    int main() // Основная функция, с которой начинается выполнение программы.
//    {
//        dog mongrel; // Создание объекта mongrel класса dog.
//        breed labrador("yellow", "large"); // Создание объекта labrador класса breed с заданным цветом и размером.
//        mongrel.setEars("pointy"); // Установка типа ушей для mongrel (собака смешанной породы).
//        labrador.setEars("long", "floppy"); // Установка типа и длины ушей для labrador (лабораторная собака).
//        cout << labrador.getColor() << endl; // Вывод цвета labrador в стандартный поток вывода.
//
//        return 0; // Завершение программы с кодом возврата 0 (успешное выполнение).
//    }




// Определяем структуру Person, которая описывает члена семьи
//    struct Person {
//        int age; // Поле для хранения возраста
//        long ss; // Поле для хранения номера социального страхования (не используется в данном коде, но может быть полезным)
//        float weight; // Поле для хранения веса
//        char name[25]; // Поле для хранения имени (длина имени ограничена 25 символами)
//    } family_member; // Объявляем экземпляр структуры Person с именем family_member (но не используем его в основном коде)
//
//    // Определяем структуру Cell, которая используется для работы с графикой экрана
//    struct Cell {
//        unsigned short character : 8; // Поле для хранения символа (размер - 8 бит)
//        unsigned short foreground : 3; // Поле для хранения значения цветовой палитры фона
//        unsigned short intensity : 1; // Поле, указывающее на интенсивность (яркость)
//        unsigned short background : 3; // Поле для хранения значения цветовой палитры фона
//        unsigned short blink : 1; // Поле для указания мигания (если 1, то мигающий)
//    } screen[25][80]; // Объявляем двумерный массив Cell размером 25 на 80, который может представлять экран
//
//    int main() {
//        setlocale(LC_ALL, "rus"); // Устанавливаем локализацию для поддержки русского языка
//
//        struct Person sister; // Объявляем экземпляр структуры Person с именем sister (для сестры)
//        Person brother; // Объявляем экземпляр структуры Person с именем brother (для брата)
//
//        sister.age = 13; // Присваиваем значение возраста сестре
//        brother.age = 7; // Присваиваем значение возраста брату
//
//        // Выводим возраст сестры на консоль
//        cout << "Возраст сестры: " << sister.age << endl;
//        // Выводим возраст брата на консоль
//        cout << "Возраст брата: " << brother.age << endl;
//
//        Cell my_cell; // Объявляем экземпляр структуры Cell с именем my_cell (для хранения информации о клетке экрана)
//        my_cell.character = 1; // Присваиваем значение символа в клетке, здесь символ имеет значение 1 (первый символ в таблице)
//        // Выводим значение символа клетки на консоль
//        cout << "Характер: " << my_cell.character;
//
//        return 0; // Завершаем выполнение программы и возвращаем 0 (успешное завершение)
//    }





int main() {



    return 0;
}